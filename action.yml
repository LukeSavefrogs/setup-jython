name: 'Setup Jython'
description: 'Installs Jython using the provided version'

inputs:
  jython-version:
    description: 'The version of Jython to use'
    required: true
    default: "2.7.2"

  installation-path:
    description: 'The path where Jython will be installed'
    required: false
    default: "~/jython/"

outputs:
  jython-download-url:
    description: "Random number"
    value: ${{ steps.get_download_url.outputs.download_url }}

runs:
  using: "composite"
  steps:
    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'temurin'
    
    # - name: Check version
    #   shell: bash
    #   if: ${{ contains(fromJSON('["2.0", "2.1"]'), inputs.jython-version) }}
    #   run: | 
    #     echo 'Class files not supported' && exit 99

    - name: Determine Jython installer URL
      shell: bash
      id: get_download_url
      run: |
        _jython_version_no_dot="$(echo "${{ inputs.jython-version }}" | tr -d '.')";

        function test_url () {
          headers="$(curl -sIL "$1")";
          echo "${headers}" | grep -qE "HTTP/([0-9.]+) 200 (OK)?";
        }
        
        url_installer_maven="https://repo1.maven.org/maven2/org/python/jython-installer/${{ inputs.jython-version }}/jython-installer-${{ inputs.jython-version }}.jar";
        url_installer_sourceforge="https://master.dl.sourceforge.net/project/jython/jython/${{ inputs.jython-version }}/jython_installer-${{ inputs.jython-version }}.jar?viasf=1";
        url_class_sourceforge="https://master.dl.sourceforge.net/project/jython/jython/${{ inputs.jython-version }}/jython-${_jython_version_no_dot}.class?viasf=1";
        
        printf "Testing URLs:\n"
        printf -- "- Maven       (installer): %s\n" "${url_installer_maven}";
        printf -- "- SourceForge (installer): %s\n" "${url_installer_sourceforge}";
        printf -- "- SourceForge (class)    : %s\n" "${url_class_sourceforge}";
        printf "\n";

        if test_url "$url_installer_maven"; then
            download_url="${url_installer_maven}";
            installer_type=jar;

        elif test_url "$url_installer_sourceforge"; then
            download_url="${url_installer_sourceforge}";
            installer_type=jar;

        elif test_url "$url_class_sourceforge"; then
            download_url="${url_class_sourceforge}";
            installer_type=class;

        else
            printf "ERROR: Coulnd't find any valid URL!\n" >&2;
            exit 1;
        fi

        echo "Download URL: ${download_url}";

        echo "download_url=${download_url}" >> $GITHUB_OUTPUT
        echo "installer_type=${installer_type}" >> $GITHUB_OUTPUT


    - name: Download Jython Installer
      id: download_installer
      shell: bash
      run: |
        case "${{ steps.get_download_url.outputs.installer_type }}" in
          jar)
            output_file=/tmp/jython_installer.jar
          ;;
          class)
            output_file=/tmp/jython_installer.class
          ;;
          *)
            printf "ERROR: Unsupported installer type '%s'\n\n" "${{ steps.get_download_url.outputs.installer_type }}";
            exit 1;
          ;;
        esac

        curl -sL "${{ steps.get_download_url.outputs.download_url }}" --output "${output_file}";
        echo "downloaded_file=${output_file}" >> $GITHUB_OUTPUT
    
    - name: Install Jython
      shell: bash
      run: |
        case "${{ steps.get_download_url.outputs.installer_type }}" in
          jar)
            # Installation types:
            # - all       : everything (including src)
            # - standard  : core, mod, demo, doc, ensurepip
            #               standard is the default
            # - minimum   : core
            # - standalone: install a single, executable .jar,
            #               containing all the modules
            #
            # Note - standalone installation may fail with the following stacktrace (tested on 2.7.2):1
            # org.python.util.install.InstallerException: Error accessing jar file
            #     at org.python.util.install.JarInstaller.inflate(JarInstaller.java:177)
            #     at org.python.util.install.ConsoleInstaller.install(ConsoleInstaller.java:66)
            #     at org.python.util.install.Installation.internalMain(Installation.java:389)
            #     at org.python.util.install.Installation.main(Installation.java:43)
            # Caused by: java.util.zip.ZipException: duplicate entry: module-info.class
            #     at java.util.zip.ZipOutputStream.putNextEntry(ZipOutputStream.java:232)
            #     at java.util.jar.JarOutputStream.putNextEntry(JarOutputStream.java:109)
            #     at org.python.util.install.StandalonePackager.addJarFile(StandalonePackager.java:92)
            #     at org.python.util.install.JarInstaller.inflate(JarInstaller.java:163)
            #     ... 3 more
            #
            # This is why I use the standard installation...
            java -jar "${{ steps.download_installer.outputs.downloaded_file }}" \
                --silent \
                --directory ${{ inputs.installation-path }} \
                --type standard;
          ;;
          class)
            # Classic installation does not work:
            # | Error: A JNI error has occurred, please check your installation and try again
            # | Exception in thread "main" java.lang.ClassFormatError: Illegal class name "jython-21" in class file jython-21
            # |       at java.lang.ClassLoader.defineClass1(Native Method)
            # |       at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
            # |       at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
            # |       at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
            # |       at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
            # |       at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
            # |       at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
            # |       at java.security.AccessController.doPrivileged(Native Method)
            # |       at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
            # |       at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
            # |       at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
            # |       at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
            # |       at sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:621)
            # cd /tmp && java -cp ./ jython-21 -o ${{ inputs.installation-path }} demo lib source
            
            # -------- Manual installation --------
            # See https://web.archive.org/web/20060702144046/http://www.jython.org/install.html
            unzip -q "${{ steps.download_installer.outputs.downloaded_file }}" -d ${{ inputs.installation-path }}
            rm -rf ${{ inputs.installation-path }}/net
          ;;
        esac

        printf "Jython installed in the directory '%s'\n\n" ${{ inputs.installation-path }}
        ls -la ${{ inputs.installation-path }}

    - name: Setup Jython alias
      shell: bash
      run: |
        installation_path="$(sed -r 's/^\s+//; s/\s+$//; s/\/+$//;' <<< ${{ inputs.installation-path }})"

        mkdir -p ~/.local/bin;

        cd "${installation_path}" && java -cp ${installation_path}/jython.jar org.python.util.jython -c "print 'Works 1'" || true
        cd "${installation_path}" && java -cp ${installation_path}/jython.jar -c "print 'Works 2'" || true
        cd "${installation_path}" && java -Dpython.home="${installation_path}" -classpath ${installation_path}/jython.jar:${CLASSPATH:-.} org.python.util.jython -c "print 'Works 3'" || true

        # ------------------ Create 'jython' script ------------------
        # ---> CLASS file
        if [[ "${{ steps.get_download_url.outputs.installer_type }}" == "class" ]]; then
          echo "::notice::Class file"

          if [[ ! -d "${installation_path}/org" ]]; then
            echo "::error::Org folder was not found."
            exit 1;
          fi
        
        cat - <<EOF | sed -r 's/^\s*//' >> ~/.local/bin/jython && chmod +x ~/.local/bin/jython
          #!/bin/bash
          java -Dpython.home="${installation_path}" -classpath "${installation_path}/jython.jar:${CLASSPATH:-.}" "org.python.util.jython" "\$@";
        EOF
        
        # ---> JAR file
        else
          echo "::notice::JAR file"
          
          if [[ ! -f ${installation_path}/jython.jar ]]; then
            echo "::error::File 'jython.jar' not found"
            exit 1
          fi
        
        cat - <<EOF | sed -r 's/^\s*//' >> ~/.local/bin/jython && chmod +x ~/.local/bin/jython
          #!/bin/bash
          java -jar ${installation_path}/jython.jar -Dpython.home="${installation_path}" "\$@";
        EOF
        fi

        # ------------------ Create 'jythonc' script ------------------
        # (https://www.jython.org/jython-old-sites/archive/22/jythonc.html)
        if [[ -f ${installation_path}/jythonc ]]; then
          ln -snf ${installation_path}/jythonc ~/.local/bin/jythonc;
        
        elif [[ -f ${installation_path}/Tools/jythonc/jythonc.py ]]; then
        cat - <<EOF | sed -r 's/^\s*//' >> ~/.local/bin/jythonc && chmod +x ~/.local/bin/jythonc
          #!/bin/bash
          ~/.local/bin/jython "${installation_path}/Tools/jythonc/jythonc.py" "\$@";
        EOF
        
        else 
          printf "WARNING: Cannot create 'jythonc' script (did not find 'jythonc' or 'jythonc.py').\n\n";
        fi

        cat ~/.local/bin/jython

        echo ~/.local/bin >> $GITHUB_PATH