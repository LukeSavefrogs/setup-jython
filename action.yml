name: 'Setup Jython'
description: 'Set up a specific version of Jython and add the command-line tools to the PATH.'
author: 'Luca Salvarani'

branding:
  icon: 'package'
  color: 'green'

inputs:
  jython-version:
    description: 'The version of Jython to use'
    required: true

  installation-path:
    description: 'The path where Jython will be installed'
    required: false
    default: "~/jython/"

outputs:
  download-url:
    description: "The URL from which the installer is downloaded"
    value: ${{ steps.find_installer.outputs.url }}

runs:
  using: "composite"
  steps:  
    - name: Print runner information
      run: |
        echo "Action running on ${{ runner.os }} ${{ runner.arch }} (name: '${{ runner.name }}')"
      shell: bash

    # Sadly, macos-latest images use Python 2.7 (dunno why)
    - name: Find Jython installer from resource list
      id: find_installer
      shell: python
      run: |
        import sys, os
        import json

        with open(r"${{ github.action_path }}/bin/resources.json", "r") as f:
          json_content = json.load(f)
        
        matching_versions = list(filter(lambda el: el["version"] == "${{ inputs.jython-version }}".strip(), json_content))
        
        if not matching_versions:
          print("::error title=No matching versions found::No versions were found that matched the string '${{ inputs.jython-version }}'")
          sys.exit(1)
        
        print("Found {} versions matching the input string".format(len(matching_versions)))
        
        if len(matching_versions) > 1:
          print("::error title=Too many versions found::Too many versions were found ({}) that matched the string '${{ inputs.jython-version }}'".format(len(matching_versions)))
          sys.exit(1)
        
        current_runner_os = "${{ runner.os }}-${{ runner.arch }}"
        if type(matching_versions[0]['available']) == list and current_runner_os.lower() not in [s.lower() for s in matching_versions[0]['available']]:
          print("::warning title=Version not available for current runner::Runner '{}' not supported".format(current_runner_os))
          print("::error title=Version not available for current runner::The specified version (${{ inputs.jython-version }}) is currently available only for the following runners: {} (current is '{}').".format(', '.join(matching_versions[0]['available']), current_runner_os))
          sys.exit(1)

        elif not matching_versions[0]['available']:
          print("::error title=Version not available::The specified version (${{ inputs.jython-version }}) is currently not available for download.")
          sys.exit(1)
        
        with open(os.getenv("GITHUB_OUTPUT"), "a+") as f:
          file_extension = os.path.splitext(matching_versions[0]["resource_urls"]["official"])[1]
          file_extension = file_extension[1:] if file_extension.startswith(".") else file_extension
          lines = [
            "details='{}'".format(json.dumps(matching_versions[0])),
            "url=" + matching_versions[0]['resource_urls']['official'],
            "version=" + matching_versions[0]['version'],
            "modified_on=" + matching_versions[0]['modified_on'],
            "file_type=" + file_extension,
            "file_name=jython_installer." + (file_extension if file_extension else ".jar")
          ]
          f.write('\n'.join(lines))

    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'temurin'

    - name: Download Jython Installer
      id: download_installer
      shell: bash
      run: |
        download_url="${{ steps.find_installer.outputs.url }}";
        output_file="/tmp/${{ steps.find_installer.outputs.file_name }}";

        printf "Downloading %s file from '%s'...\n" "${{ steps.find_installer.outputs.file_type }}" "${download_url}";

        curl -L "${download_url}" --output "${output_file}";

        echo "temporary_file=${output_file}" >> "$GITHUB_OUTPUT"
    
    - name: Install Jython
      id: installation
      shell: bash
      run: |
            case "${{ steps.find_installer.outputs.file_type }}" in
              class)
                unzip ${{ steps.download_installer.outputs.temporary_file }} -d ${{ inputs.installation-path }}
              ;;

              jar)
                # Installation types:
                # - all       : everything (including src)
                # - standard  : core, mod, demo, doc, ensurepip
                #               standard is the default
                # - minimum   : core
                # - standalone: install a single, executable .jar,
                #               containing all the modules
                #
                # Note - standalone installation may fail with the following stacktrace (tested on 2.7.2):1
                # org.python.util.install.InstallerException: Error accessing jar file
                #     at org.python.util.install.JarInstaller.inflate(JarInstaller.java:177)
                #     at org.python.util.install.ConsoleInstaller.install(ConsoleInstaller.java:66)
                #     at org.python.util.install.Installation.internalMain(Installation.java:389)
                #     at org.python.util.install.Installation.main(Installation.java:43)
                # Caused by: java.util.zip.ZipException: duplicate entry: module-info.class
                #     at java.util.zip.ZipOutputStream.putNextEntry(ZipOutputStream.java:232)
                #     at java.util.jar.JarOutputStream.putNextEntry(JarOutputStream.java:109)
                #     at org.python.util.install.StandalonePackager.addJarFile(StandalonePackager.java:92)
                #     at org.python.util.install.JarInstaller.inflate(JarInstaller.java:163)
                #     ... 3 more

                java -jar ${{ steps.download_installer.outputs.temporary_file }} \
                    --silent \
                    --directory ${{ inputs.installation-path }} \
                    --type standard;
              ;;
            esac 

            printf "Jython installed in the directory '%s'\n\n" "${{ inputs.installation-path }}"

            # rm -f ${{ steps.download_installer.outputs.temporary_file }}
            
    - name: Setup Jython alias
      shell: bash
      run: |
        installation_path="$(sed -r 's/^\s+//; s/\s+$//; s/\/+$//;' <<< "${{ inputs.installation-path }}")"

        mkdir -p ~/.local/bin;
        case "${{ steps.find_installer.outputs.file_type }}" in
          class)
            jython_cmd="java -cp ${installation_path}/jython.jar org.python.util.jython \"\$@\""
          ;;

          jar)
            jython_cmd="java -jar ${installation_path}/jython.jar \"\$@\""
          ;;
        esac

        echo "$jython_cmd" >> ~/.local/bin/jython;
        
        chmod +x ~/.local/bin/jython;
        # echo ~/.local/bin >> $GITHUB_PATH
        # echo ${{ github.workspace }}/.local/bin >> $GITHUB_PATH

    - name: Add to PATH
      shell: ${{ runner.os == 'Windows' && 'pwsh' || 'bash' }}
      run: |
        echo ${HOME}/.local/bin >> $GITHUB_PATH